from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import chromedriver_autoinstaller
import time
import os
import signal
import subprocess
import sys

# Install matching chromedriver
chromedriver_autoinstaller.install()

# Cleanup function
def run_cleanup():
    """Run the cleanup script"""
    try:
        cleanup_script = os.path.join(os.path.dirname(__file__), "cleanup.sh")
        if os.path.exists(cleanup_script):
            print("\nRunning cleanup script...")
            subprocess.run(["bash", cleanup_script], check=False)
        else:
            print(f"\nCleanup script not found: {cleanup_script}")
    except Exception as e:
        print(f"Error running cleanup script: {e}")

# Signal handler for Ctrl+C
def signal_handler(sig, frame):
    print("\nCtrl+C detected!")
    run_cleanup()
    os._exit(130)  # Standard exit code for SIGINT

# Register signal handler
signal.signal(signal.SIGINT, signal_handler)

def cookie_to_netscape_format(cookie):
    """Convert a Selenium cookie dict to Netscape cookie format"""
    # Netscape cookie format:
    # domain\tflag\tpath\tsecure\texpiration\tname\tvalue
    
    domain = cookie.get('domain', '')
    # Set flag to TRUE if domain starts with . (accessible to subdomains)
    flag = 'TRUE' if domain.startswith('.') else 'FALSE'
    path = cookie.get('path', '/')
    # Set secure flag
    secure = 'TRUE' if cookie.get('secure', False) else 'FALSE'
    # Handle expiry - if not set, use 0 (session cookie)
    expiry = int(cookie.get('expiry', 0))
    name = cookie.get('name', '')
    value = cookie.get('value', '')
    
    return f"{domain}\t{flag}\t{path}\t{secure}\t{expiry}\t{name}\t{value}"

# Set up Chrome options with cloned profile
driver_options = Options()
driver_options.add_argument("--user-data-dir=/home/julian/.config/google-chrome/SeleniumProfile")

# Launch Chrome
driver = webdriver.Chrome(options=driver_options)

try:
    # Navigate to YouTube Music
    url = "https://music.youtube.com"
    print(f"Opening {url}...")
    driver.get(url)
    
    # Wait for page to load - wait for a common element
    wait = WebDriverWait(driver, 10)
    try:
        # Wait for YouTube Music to load
        wait.until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "ytmusic-app, ytmusic-nav-bar"))
        )
        print("YouTube Music loaded successfully")
    except Exception as e:
        print(f"Warning: Could not confirm page load ({type(e).__name__}), continuing anyway...")
    
    # Additional wait to ensure everything is loaded
    time.sleep(3)
    
    # Get all cookies
    cookies = driver.get_cookies()
    print(f"Found {len(cookies)} cookies")
    
    # Write cookies to file in Netscape format
    output_file = "cookies.txt"
    with open(output_file, 'w') as f:
        # Write Netscape format header
        f.write("# Netscape HTTP Cookie File\n")
        f.write("# This is a generated file! Do not edit.\n")
        f.write("# Generated by YouTube Music Cookie Extractor\n\n")
        
        # Write each cookie
        for cookie in cookies:
            netscape_line = cookie_to_netscape_format(cookie)
            f.write(netscape_line + "\n")
    
    print(f"\nCookies saved to: {output_file}")
    print(f"Total cookies exported: {len(cookies)}")
    
    # Show some sample cookies (without values for security)
    print("\nSample cookies exported:")
    for cookie in cookies[:5]:
        print(f"  - {cookie['name']} (domain: {cookie['domain']})")
    
    if len(cookies) > 5:
        print(f"  ... and {len(cookies) - 5} more")
    
    # Keep browser open for a moment
    print("\nClosing browser in 3 seconds...")
    time.sleep(3)

except Exception as e:
    print(f"Script crashed: {e}")
    run_cleanup()
    os._exit(1)  # Force exit after cleanup

finally:
    # Close the browser
    try:
        driver.quit()
        print("Browser closed successfully")
    except:
        pass

print("\nCookie extraction complete!")
print("You can now use cookies.txt with tools like yt-dlp:")
print("  yt-dlp --cookies cookies.txt <url>")
